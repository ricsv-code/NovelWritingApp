@using NovelWritingApp.Shared.Models
@using NovelWritingApp.Shared.Utilities
@inject ChapterService ChapterService
@inject CharacterService CharacterService

<div class="sidebar">
    @if (CurrentNovel != null)
    {
        <h2>Chapters</h2>
        <ul>
            @foreach (var chapter in CurrentNovel.Chapters)
            {
                <li>
                    @if (chapter == SelectedChapter && isEditingChapter)
                    {
                        <input type="text" @bind="chapter.Title" />
                        <textarea @bind="chapter.ChapSynopsis"></textarea>
                        <button @onclick="SaveChapter">Save</button>
                        <button @onclick="CancelEditChapter">Cancel</button>
                    }
                    else
                    {
                        <span @onclick="() => SelectChapter(chapter)">@chapter.Title</span>
                        @if (chapter == SelectedChapter)
                        {
                            <button @onclick="EditChapter">Edit</button>
                        }
                    }
                </li>
            }
        </ul>
        <button @onclick="CreateNewChapter">Create Chapter</button>

        <h2>Characters</h2>
        <ul>
            @foreach (var character in CurrentNovel.Characters)
            {
                <li>
                    @if (character == SelectedCharacter && isEditingCharacter)
                    {
                        <input type="text" @bind="character.Name" />
                        <textarea @bind="character.Description"></textarea>
                        <textarea @bind="character.Motivations"></textarea>
                        <textarea @bind="character.CharSynopsis"></textarea>
                        <button @onclick="SaveCharacter">Save</button>
                        <button @onclick="CancelEditCharacter">Cancel</button>
                    }
                    else
                    {
                        <span @onclick="() => SelectCharacter(character)">@character.Name</span>
                        @if (character == SelectedCharacter)
                        {
                            <button @onclick="EditCharacter">Edit</button>
                        }
                    }
                </li>
            }
        </ul>
        <button @onclick="CreateNewCharacter">Create Character</button>
    }
</div>

@code {
    [Parameter] public Novel CurrentNovel { get; set; }
    [Parameter] public Chapter SelectedChapter { get; set; }
    [Parameter] public Character SelectedCharacter { get; set; }
    [Parameter] public EventCallback<Chapter> OnChapterSelected { get; set; }
    [Parameter] public EventCallback<Character> OnCharacterSelected { get; set; }
    [Parameter] public EventCallback OnCreateChapter { get; set; }
    [Parameter] public EventCallback OnCreateCharacter { get; set; }

    private bool isEditingChapter = false;
    private bool isEditingCharacter = false;

    private void SelectChapter(Chapter chapter)
    {
        SelectedChapter = chapter;
        isEditingChapter = false;
        OnChapterSelected.InvokeAsync(chapter);
    }

    private void EditChapter()
    {
        isEditingChapter = true;
    }

    private async Task SaveChapter()
    {
        isEditingChapter = false;
        CurrentNovel.LastModified = DateTime.Now;
        await ChapterService.UpdateChapterAsync(SelectedChapter.MapToDTO());
        Console.WriteLine("Chapter saved successfully.");
    }

    private void CancelEditChapter()
    {
        isEditingChapter = false;
    }

    private void SelectCharacter(Character character)
    {
        SelectedCharacter = character;
        isEditingCharacter = false;
        OnCharacterSelected.InvokeAsync(character);
    }

    private void EditCharacter()
    {
        isEditingCharacter = true;
    }

    private async Task SaveCharacter()
    {
        isEditingCharacter = false;
        CurrentNovel.LastModified = DateTime.Now;
        await CharacterService.UpdateCharacterAsync(SelectedCharacter.MapToDTO());
        Console.WriteLine("Character saved successfully.");
    }

    private void CancelEditCharacter()
    {
        isEditingCharacter = false;
    }

    private async Task CreateNewChapter()
    {
        await OnCreateChapter.InvokeAsync(null);
    }

    private async Task CreateNewCharacter()
    {
        await OnCreateCharacter.InvokeAsync(null);
    }
}
