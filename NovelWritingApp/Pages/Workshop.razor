@page "/"
@using NovelWritingApp.Shared.Models
@using NovelWritingApp.Shared.Utilities
@using NovelWritingApp.Components
@inject NovelService NovelService
@inject ChapterService ChapterService
@inject CharacterService CharacterService

<div class="workshop-container">
    <div class="novel-title">
        @if (isEditingTitle)
        {
            <input type="text" @bind="CurrentNovel.Title" />
            <button class="btn" @onclick="SaveTitle">Save</button>
            <button class="btn" @onclick="CancelEditTitle">Cancel</button>
            <select class="select" @onchange="OnNovelSelected">
                @foreach (var novel in Novels)
                {
                    <option value="@novel.NovelId">@novel.Title</option>
                }
            </select>
        }
        else
        {
            <h1>@CurrentNovel?.Title</h1>
            <button class="btn" @onclick="EditTitle">Edit</button>
        }
    </div>

    <div class="main-content">
        <div class="chapter-content">
            @if (SelectedChapter != null)
            {
                <ChapterContent CurrentChapter="SelectedChapter" OnSaveChapterContent="SaveChapterContent" />
            }
            else
            {
                <p>Loading..</p>
            }
        </div>

        <Sidebar CurrentNovel="CurrentNovel" SelectedChapter="SelectedChapter" SelectedCharacter="SelectedCharacter"
                 OnChapterSelected="SelectChapter" OnCharacterSelected="SelectCharacter"
                 OnCreateChapter="CreateChapter" OnCreateCharacter="CreateCharacter" />
    </div>
</div>

@code {
    private Novel CurrentNovel;
    private Chapter SelectedChapter;
    private Character SelectedCharacter;
    private bool isEditingTitle = false;
    private string chapterContent;
    private List<Novel> Novels = new List<Novel>();

    protected override async Task OnInitializedAsync()
    {
        if (CurrentNovel == null)
        {
            await CreateNovelAsync();
        }
    }


    private async Task OnNovelSelected(ChangeEventArgs e)
    {
        var selectedNovelId = int.Parse(e.Value.ToString());
        CurrentNovel = Novels.FirstOrDefault(n => n.NovelId == selectedNovelId);
        SelectedChapter = CurrentNovel?.Chapters.FirstOrDefault();
        if (SelectedChapter != null)
        {
            await LoadChapterContent();
        }
    }


    private async Task CreateNovelAsync()
    {
        try
        {
            var newNovel = new NovelDTO
                {
                    Title = "New Novel",
                    CreationDate = DateTime.Now,
                    LastModified = DateTime.Now
                };

            CurrentNovel = await NovelService.AddNovelAsync(newNovel);

            SelectedChapter = CurrentNovel.Chapters.FirstOrDefault();
            if (SelectedChapter != null)
            {
                await LoadChapterContent();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating novel: {ex.Message}");
        }
    }

    private async Task EditTitle()
    {
        isEditingTitle = true;
        Novels = await NovelService.GetNovelsAsync();
    }




    private async Task SaveTitle()
    {
        isEditingTitle = false;
        CurrentNovel.LastModified = DateTime.Now;
        await NovelService.UpdateNovelAsync(CurrentNovel.MapToDTO());
        Console.WriteLine("Title saved successfully.");
    }

    private void CancelEditTitle()
    {
        isEditingTitle = false;
    }

    private void SelectChapter(Chapter chapter)
    {
        SelectedChapter = chapter;
        LoadChapterContent();
    }

    private void SelectCharacter(Character character)
    {
        SelectedCharacter = character;
    }

    private async Task LoadChapterContent()
    {
        if (SelectedChapter != null)
        {
            chapterContent = await ChapterService.GetChapterContentAsync(SelectedChapter.ContentFilePath);
        }
    }

    private async Task SaveChapterContent(string content)
    {
        if (SelectedChapter != null)
        {
            chapterContent = content;
            await ChapterService.UpdateChapterContentAsync(SelectedChapter.ChapterId, chapterContent);
            Console.WriteLine("Chapter content saved.");
        }
    }

    private async Task CreateChapter()
    {
        try
        {
            var newChapter = new ChapterDTO
                {
                    NovelId = CurrentNovel.NovelId
                };

            var createdChapter = await ChapterService.CreateChapterAsync(newChapter);
            CurrentNovel.Chapters.Add(createdChapter.MapToEntity());
            SelectChapter(CurrentNovel.Chapters.Last());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating chapter: {ex.Message}");
        }
    }

    private async Task CreateCharacter()
    {
        try
        {
            var newCharacter = new CharacterDTO
                {
                    NovelId = CurrentNovel.NovelId
                };

            var createdCharacter = await CharacterService.CreateCharacterAsync(newCharacter);
            CurrentNovel.Characters.Add(createdCharacter.MapToEntity());
            SelectCharacter(CurrentNovel.Characters.Last());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating character: {ex.Message}");
        }
    }
}
